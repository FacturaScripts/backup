{% extends "Master/MenuBghTemplate.html.twig" %}

{% block body %}
    <div class="bg-light pt-4 pb-5">
        <div class="container">
            <div class="row">
                <div class="col">
                    <h1 class="h4">
                        <i class="fas fa-save fa-fw"></i> {{ fsc.title }}
                    </h1>
                    <br/>
                </div>
            </div>
        </div>
    </div>
    <div class="container" style="margin-top: -60px;">
        <div class="row">
            <div class="col">
                <div class="card shadow mb-5">
                    <div class="card-body">
                        <h2 class="h3">
                            <i class="fas fa-download text-primary mr-2"></i> {{ trans('download-backup') }}
                        </h2>
                        <p class="card-text">{{ trans('download-backup-p') }}</p>
                    </div>
                    <div class="card-footer p-2">
                        <a href="#" class="btn btn-primary btn-spin-action mr-2" onclick="return generateDbBackup(this)">
                            <i class="fas fa-database mr-2"></i> {{ trans('database') }}
                        </a>
                        <a href="#" class="btn btn-secondary btn-spin-action" onclick="return downloadFilesBackup()">
                            <i class="fas fa-download mr-2"></i> {{ trans('files') }}
                        </a>
                    </div>
                </div>

                <form action="{{ fsc.url() }}" id="f_restore_db" method="post" enctype="multipart/form-data">
                    {{ formToken() }}
                    <input type="hidden" name="action" value="restore-backup"/>
                    <div class="card shadow mb-4">
                        <div class="card-body bg-warning">
                            <h3 class="h5 mb-0">
                                <i class="fas fa-database mr-2"></i> {{ trans('restore-backup') }}
                            </h3>
                        </div>
                        <div class="card-body">
                            <p>
                                {{ trans('restore-backup-p') }}
                                <span class="text-danger">{{ trans('restore-backup-warning') }}</span>
                            </p>
                            <div class="form-group">
                                {{ trans('database') }}
                                <input type="file" name="db_file" accept=".sql,.sql.gz" class="form-control-file"
                                       required/>
                            </div>
                            <p class="card-text text-muted">
                                {{ trans('help-server-accepts-filesize', {'%size%': fsc.getMaxFileUpload()}) }}
                            </p>
                        </div>
                        <div class="card-footer p-2">
                            <button type="submit" class="btn btn-warning btn-spin-action">
                                {{ trans('restore') }}
                            </button>
                            <div class="btn-group ml-2">
                                <div class="dropdown">
                                    <button class="btn btn-secondary dropdown-toggle" type="button"
                                            data-toggle="dropdown" aria-expanded="false">
                                        {{ trans('switch-db-charset') }}
                                    </button>
                                    <div class="dropdown-menu">
                                        <a class="dropdown-item"
                                           href="?action=switch-db-charset&charset=utf8&multireqtoken={{ formToken(false) }}">
                                            utf8
                                        </a>
                                        <a class="dropdown-item"
                                           href="?action=switch-db-charset&charset=utf8mb4&multireqtoken={{ formToken(false) }}">
                                            utf8mb4
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>

                <form action="{{ fsc.url() }}" id="f_restore_files" method="post" enctype="multipart/form-data">
                    {{ formToken() }}
                    <input type="hidden" name="action" value="restore-files"/>
                    <div class="card shadow mb-4">
                        <div class="card-body text-white bg-secondary">
                            <h3 class="h5 mb-0">
                                <i class="fas fa-upload mr-2"></i> {{ trans('restore-files') }}
                            </h3>
                        </div>
                        <div class="card-body">
                            <p>{{ trans('restore-files-p') }}</p>
                            <div class="form-group">
                                {{ trans('files') }}
                                <input type="file" name="zip_file" accept=".zip" class="form-control-file" required/>
                            </div>
                            <p class="card-text text-muted">
                                {{ trans('help-server-accepts-filesize', {'%size%': fsc.getMaxFileUpload()}) }}
                            </p>
                        </div>
                        <div class="card-footer p-2">
                            <button type="submit" class="btn btn-warning btn-spin-action">
                                {{ trans('restore') }}
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        function generateDbBackup(btn) {
            animateSpinner('add');

            let download_url = '{{ fsc.url() }}?action=download-db&multireqtoken={{ formToken(false) }}';
            // le añadimos números aleatorios para cambiar el token
            download_url += Math.floor(Math.random() * 1000000);

            let xhr = new XMLHttpRequest();
            xhr.open('GET', download_url, true);

            xhr.onload = function () {
                if (xhr.status === 200) {

                    let response = JSON.parse(xhr.responseText);
                    let backupUrl = response.backupUrl;

                    if (backupUrl) {
                        btn.innerHTML = '<i class="fas fa-database mr-2"></i> Descargar';
                        btn.onclick = function() {
                            return downloadBackup(backupUrl);
                        };
                        btn.classList.remove('btn-primary');
                        btn.classList.add('btn-warning');
                    } else {
                        alert("No se pudo obtener el url del backup.");
                    }
                }else {
                    alert("Error al generar el backup");
                }
                animateSpinner('remove');
            };

            xhr.onerror = function () {
                animateSpinner('remove');
                alert('error');
            };

            xhr.send();

            return false;
        }

        function downloadBackup(backupUrl) {
            if (backupUrl) {
                window.location.href = backupUrl;
            } else {
                alert('El url del backup no está disponible.');
            }
            return false;
        }

        function downloadFilesBackup() {
            animateSpinner('add');

            let download_url = '{{ fsc.url() }}?action=download-files&multireqtoken={{ formToken(false) }}';
            // le añadimos números aleatorios para cambiar el token
            download_url += Math.floor(Math.random() * 1000000);

            let xhr = new XMLHttpRequest();
            xhr.open('GET', download_url, true);
            xhr.responseType = 'blob';

            xhr.onload = function () {
                if (xhr.status === 200) {
                    let blob = new Blob([xhr.response], {type: 'application/octet-stream'});
                    let url = window.URL.createObjectURL(blob);
                    let a = document.createElement('a');
                    a.href = url;
                    a.download = 'backup_' + (new Date()).toISOString().slice(0, 19).replace(/[-:]/g, '') + '.zip';
                    a.click();
                    window.URL.revokeObjectURL(url);
                }
                animateSpinner('remove');
            };

            xhr.onerror = function () {
                animateSpinner('remove');
                alert('error');
            };

            xhr.send();

            return false;
        }

        $(document).ready(function () {
            $('#f_restore_db').on('submit', function (e) {
                animateSpinner('add');
                let fileInput = $(this).find('input[type=file]');
                let fileSize = fileInput[0].files[0].size; // tamaño del archivo en bytes

                if (fileSize > {{ fsc.getMaxFileUpload() }} * 1024 * 1024) { // MB
                    e.preventDefault();
                    alert('{{ trans('backup-file-too-big', {'%size%': fsc.getMaxFileUpload()}) }}');
                    animateSpinner('remove');
                }
            });
            $('#f_restore_files').on('submit', function (e) {
                animateSpinner('add');
                let fileInput = $(this).find('input[type=file]');
                let fileSize = fileInput[0].files[0].size; // tamaño del archivo en bytes

                if (fileSize > {{ fsc.getMaxFileUpload() }} * 1024 * 1024) { // MB
                    e.preventDefault();
                    alert('{{ trans('backup-file-too-big', {'%size%': fsc.getMaxFileUpload()}) }}');
                    animateSpinner('remove');
                }
            });
        });
    </script>
{% endblock %}